"use strict";(self.webpackChunkOPS445=self.webpackChunkOPS445||[]).push([[465],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),k=i,c=u["".concat(s,".").concat(k)]||u[k]||d[k]||r;return n?a.createElement(c,o(o({ref:t},m),{},{components:n})):a.createElement(c,o({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3581:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return p}});var a=n(3117),i=(n(7294),n(3905));const r={id:"assignment1b",title:"Assignment 1 Version B",sidebar_position:3,description:"Assignment 1 Version B"},o="Assignment 1 Version B",l={unversionedId:"B-Assignments/assignment1b",id:"B-Assignments/assignment1b",title:"Assignment 1 Version B",description:"Assignment 1 Version B",source:"@site/docs/B-Assignments/assignment1b.md",sourceDirName:"B-Assignments",slug:"/B-Assignments/assignment1b",permalink:"/OPS445/B-Assignments/assignment1b",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/OPS445/tree/main/docs/B-Assignments/assignment1b.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"assignment1b",title:"Assignment 1 Version B",sidebar_position:3,description:"Assignment 1 Version B"},sidebar:"courseNotesSidebar",previous:{title:"Assignment 1 Version A",permalink:"/OPS445/B-Assignments/assignment1a"},next:{title:"Assignment 1 Version C",permalink:"/OPS445/B-Assignments/assignment1c"}},s={},p=[{value:"Assignment 1",id:"assignment-1",level:2},{value:"Overview",id:"overview",level:3},{value:"Restrictions",id:"restrictions",level:3},{value:"Instructions",id:"instructions",level:3},{value:"Deadlines will be given to you by your instructor.",id:"deadlines-will-be-given-to-you-by-your-instructor",level:2},{value:"Formatting And Style",id:"formatting-and-style",level:3},{value:"Rubric",id:"rubric",level:3},{value:"Sample Output",id:"sample-output",level:3}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"assignment-1-version-b"},"Assignment 1 Version B"),(0,i.kt)("h2",{id:"assignment-1"},"Assignment 1"),(0,i.kt)("h3",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Your assignment will be to create a script that can correctly print future and past dates. The script will divide a typical year by a given value. For example, 365 divided by 2 will be rounded to 182. Your script will then the correct date 182 days into the past and 182 days into the future."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"./assignment1.py 2023-01-25 2")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"A year divided by 2 is 182 days.\nThe date 182 days ago was 2022-07-27.\nThe date 182 from now will be 2023-07-26.\n")),(0,i.kt)("h3",{id:"restrictions"},"Restrictions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You may ",(0,i.kt)("strong",{parentName:"li"},"only use ",(0,i.kt)("inlineCode",{parentName:"strong"},"sys")," for parsing command line arguments"),"."),(0,i.kt)("li",{parentName:"ul"},"No other modules are allowed")),(0,i.kt)("h3",{id:"instructions"},"Instructions"),(0,i.kt)("p",null,"The assignment will be broken into two milestones and one final submission. Please update your repository for each milestone and complete the final submission in order to earn all marks."),(0,i.kt)("h2",{id:"deadlines-will-be-given-to-you-by-your-instructor"},"Deadlines will be given to you by your instructor."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Preparation")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Accept the assignment on Blackboard."),(0,i.kt)("li",{parentName:"ol"},"Once you accepted the assignment, you will get access to a starting repo."),(0,i.kt)("li",{parentName:"ol"},"Clone the repo to your local VM."),(0,i.kt)("li",{parentName:"ol"},"Add your code to the ",(0,i.kt)("em",{parentName:"li"},"existing")," ",(0,i.kt)("inlineCode",{parentName:"li"},"assignment1.py")," file."),(0,i.kt)("li",{parentName:"ol"},"Commit after ",(0,i.kt)("strong",{parentName:"li"},"each significant change")," to the code."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"You can never have too many commits"),". GitHub is your proof of work and your backup if things go wrong.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Milestone 1")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You are provided with a function called ",(0,i.kt)("inlineCode",{parentName:"li"},"after()"),". This function is complete and should successfully return the next day\u2019s date when provided with a starting date in ",(0,i.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD")," format. You can experiment with this function by importing it into the Python interpreter:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from assignment1 import after\nafter('2023-01-25')\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Study the ",(0,i.kt)("inlineCode",{parentName:"li"},"after()")," function and explain how it works. Use ",(0,i.kt)("strong",{parentName:"li"},"in-line comments")," for each line of code."),(0,i.kt)("li",{parentName:"ol"},"Use the ",(0,i.kt)("inlineCode",{parentName:"li"},"after()")," function as a guide, and complete the ",(0,i.kt)("inlineCode",{parentName:"li"},"before()")," function. This function should perform the opposite: it should return the previous day\u2019s date."),(0,i.kt)("li",{parentName:"ol"},"Don\u2019t forget to push your code.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Check Your Work")),(0,i.kt)("p",null,"Use the check script to verify your work so far."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"python3 CheckA1.py -f -v TestBefore")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Feedback")),(0,i.kt)("p",null,"I will provide you feedback on ",(0,i.kt)("strong",{parentName:"p"},"GitHub"),". Check the ",(0,i.kt)("strong",{parentName:"p"},"Issues")," tab, and make any changes that are required before the next deadline. You can ",(0,i.kt)("strong",{parentName:"p"},"close the issue")," to indicate that you have seen the comment."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Submission")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Take the screenshots of the output of check scripts. Add the screenshots in the files named: milstone1_testBefore.jpg"),(0,i.kt)("li",{parentName:"ul"},"Commit this file to the repository."),(0,i.kt)("li",{parentName:"ul"},"Commits must be done before the deadline, a 20% deduction of marks applies to late submissions per day."),(0,i.kt)("li",{parentName:"ul"},"In addition submit the file milstone1","_","testBefore.jpg to Blackbaord, a link will be provided.")),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Milestone 2")),(0,i.kt)("p",null,"This Milestone will ask you to ",(0,i.kt)("em",{parentName:"p"},"refactor")," your code. This means modifying existing code to make it more portable."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Complete the ",(0,i.kt)("inlineCode",{parentName:"li"},"leap_year()")," function, using the relevant code that\u2019s already inside ",(0,i.kt)("inlineCode",{parentName:"li"},"after()"),"."),(0,i.kt)("li",{parentName:"ol"},"Edit your ",(0,i.kt)("inlineCode",{parentName:"li"},"after()")," function. Replace any code that calculates leap years with a ",(0,i.kt)("inlineCode",{parentName:"li"},"leap_year")," function call."),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"after()")," still works."),(0,i.kt)("li",{parentName:"ol"},"Complete the ",(0,i.kt)("inlineCode",{parentName:"li"},"dbda()")," function. Given a starting date and number of days, ",(0,i.kt)("inlineCode",{parentName:"li"},"dbda()")," should call either ",(0,i.kt)("inlineCode",{parentName:"li"},"before()")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"after()")," inside of a loop and return the end date. A negative number of days should return a date ",(0,i.kt)("em",{parentName:"li"},"before")," start","_","date, and a postive number should return a date ",(0,i.kt)("em",{parentName:"li"},"after")," start","_","date.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Check Your Work")),(0,i.kt)("p",null,"Use the check script to verify your work."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"python3 CheckA1.py -f -v TestLeap")," to test your ",(0,i.kt)("inlineCode",{parentName:"li"},"leap_year()")," function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"python3 CheckA1.py -f -v TestAfter")," to test ",(0,i.kt)("inlineCode",{parentName:"li"},"after()")," and ensure it\u2019s still working."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"python3 CheckA1.py -f -v TestDBDA")," to test ",(0,i.kt)("inlineCode",{parentName:"li"},"dbda()"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Submission")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Take the screenshots of the output of check scripts. Add the screenshots in the files named: milstone2","_","leap.jpg, milstone2","_","after.jpg, milstone2","_","dbda.jpg"),(0,i.kt)("li",{parentName:"ul"},"Commit these three files to repository."),(0,i.kt)("li",{parentName:"ul"},"Commits must be done before the deadline, a 20% deduction of marks applies to late submissions per day."),(0,i.kt)("li",{parentName:"ul"},"In addition submit these three files to Blackboard, a link will be provided.")),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Final Submission")),(0,i.kt)("p",null,"For the final submission you should integrate your functions into a working script, add relevant comments and implement some ",(0,i.kt)("strong",{parentName:"p"},"error checking")," so that invalid dates or arguments will cause a ",(0,i.kt)("strong",{parentName:"p"},"usage")," message to be displayed."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"In the ",(0,i.kt)("em",{parentName:"li"},"main")," block, check the number of arguments. The first argument should be a valid date, and the second should be a divisor of a typical year (365 days)."),(0,i.kt)("li",{parentName:"ol"},"A divisor of ",(0,i.kt)("strong",{parentName:"li"},"2")," would mean dividing a year by half. This gives us 182 days. (This is rounded down, use the ",(0,i.kt)("inlineCode",{parentName:"li"},"round()")," function)."),(0,i.kt)("li",{parentName:"ol"},"Print the number of days for the divisor."),(0,i.kt)("li",{parentName:"ol"},"Use one call to ",(0,i.kt)("inlineCode",{parentName:"li"},"dbda()")," to return the date that\u2019s ",(0,i.kt)("strong",{parentName:"li"},"182 days")," before the start date."),(0,i.kt)("li",{parentName:"ol"},"Use a second call to ",(0,i.kt)("inlineCode",{parentName:"li"},"dbda()")," to return the date that\u2019s ",(0,i.kt)("strong",{parentName:"li"},"182 days")," after the start date.")),(0,i.kt)("p",null,"At this point you have a working script. Implement error checking:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Complete the ",(0,i.kt)("inlineCode",{parentName:"li"},"usage()")," function. This should print a helpful message to the user when they make a mistake, and exit."),(0,i.kt)("li",{parentName:"ol"},"Complete the ",(0,i.kt)("inlineCode",{parentName:"li"},"valid_date()")," function. This should use error checking to make sure that any date entered by the user is valid."),(0,i.kt)("li",{parentName:"ol"},"Ensure that the ",(0,i.kt)("strong",{parentName:"li"},"divisor")," argument is not zero! This would cause a Divide by zero error.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Final Checks")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"python3 CheckA1.py -f -v TestValidDate")," to test your ",(0,i.kt)("inlineCode",{parentName:"li"},"valid_date()")," function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"python3 CheckA1.py -f -v TestFinal")," to test the final version of your script.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Submitting Your Code For Review")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Push your code to GitHub before the deadline."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Take the screenshots of the output of check scripts. Add the screenshots in the files named: finalSubmission","_","TestValidDate.jpg, finalSubmission","_","TestFinal.jpg"),(0,i.kt)("li",{parentName:"ul"},"Commit these two files to repository."),(0,i.kt)("li",{parentName:"ul"},"Commits must be done before the deadline, a 20% deduction of marks applies to late submissions per day."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In addition, ",(0,i.kt)("strong",{parentName:"p"},"submit your code and the screenshots (finalSubmission","_","TestValidDate.jpg, finalSubmission","_","TestFinal.jpg) to Blackboard"),". A link will be provided"))),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"formatting-and-style"},"Formatting And Style"),(0,i.kt)("p",null,"A significant amount of your mark will be based on the things that ",(0,i.kt)("em",{parentName:"p"},"aren\u2019t")," your code. Please review the following guidelines to maximise your grade."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Comments And Documentation")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"You need to be commenting your code"),". The following documentation is required:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"in-line comments"),": Any line of code that is doing something non-obvious should be commented. Explain ",(0,i.kt)("strong",{parentName:"li"},"why")," you are doing something, rather than ",(0,i.kt)("strong",{parentName:"li"},"what")," you are doing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"function docstrings"),": After your ",(0,i.kt)("inlineCode",{parentName:"li"},"def")," line, you enter a docstring inside \u201c\u201c. Any function that doesn\u2019t already come with a docstring should have one."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"top-level docstring"),": You will have noticed that the top of your ",(0,i.kt)("inlineCode",{parentName:"li"},"assignment1.py")," file already has this docstring. Complete the ",(0,i.kt)("strong",{parentName:"li"},"Academic Honesty declaration")," and complete the docstring.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"PEP")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://peps.python.org/pep-0008/"},"PEP-8 Style Guide")," is an official Python document that describes best practices for formatting your code. ",(0,i.kt)("strong",{parentName:"p"},"You should follow this guide as much as possible"),". You may find that ",(0,i.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/python/linting"},"using a linter")," to check style to be useful."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Functions and Variables")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In addition to the required functions, you may create as many functions as you need."),(0,i.kt)("li",{parentName:"ul"},"Functions should be in lower case, and spaces should be represented with an underscore. For example: ",(0,i.kt)("inlineCode",{parentName:"li"},"function_name"),"."),(0,i.kt)("li",{parentName:"ul"},"Any data used inside of a function should be passed in as a parameter. Avoid global variables."),(0,i.kt)("li",{parentName:"ul"},"Variables should have a sensible name. Avoid naming things ",(0,i.kt)("inlineCode",{parentName:"li"},"x"),"."),(0,i.kt)("li",{parentName:"ul"},"Variables should be in lower case, and spaces represented by an underscore. For example: ",(0,i.kt)("inlineCode",{parentName:"li"},"start_date"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Git Commits")),(0,i.kt)("p",null,"A workplace will have its own policy about how often to commit, and how to document commits. For us, ",(0,i.kt)("strong",{parentName:"p"},"git commits are your proof of work"),". Assignments that lack commits are subject to ",(0,i.kt)("strong",{parentName:"p"},"Academic Integrity review"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A good practice is to create a commit for ",(0,i.kt)("strong",{parentName:"li"},"every significant change")," to your code. ",(0,i.kt)("strong",{parentName:"li"},"At the very least, commit after completing each of the required functions"),"."),(0,i.kt)("li",{parentName:"ul"},"An acceptable commit message needs to short, but should also describe the change. For example: ",(0,i.kt)("inlineCode",{parentName:"li"},'git commit -m "completed the leap_year function"'),".")),(0,i.kt)("h3",{id:"rubric"},"Rubric"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"th"},"Element")),(0,i.kt)("th",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"th"},"Marks")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"Milestone 1:")),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Documentation for ",(0,i.kt)("inlineCode",{parentName:"td"},"after")," function"),(0,i.kt)("td",{parentName:"tr",align:"left"},"4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TestBefore Checks"),(0,i.kt)("td",{parentName:"tr",align:"left"},"6")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"Milestone 2:")),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TestAfter Checks"),(0,i.kt)("td",{parentName:"tr",align:"left"},"6")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TestLeap Checks"),(0,i.kt)("td",{parentName:"tr",align:"left"},"2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TestDBDA Checks"),(0,i.kt)("td",{parentName:"tr",align:"left"},"2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("strong",{parentName:"td"},"Final Submission:")),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TestValidDate Checks"),(0,i.kt)("td",{parentName:"tr",align:"left"},"4")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TestFinal Checks"),(0,i.kt)("td",{parentName:"tr",align:"left"},"12")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Comments and Documentation"),(0,i.kt)("td",{parentName:"tr",align:"left"},"2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"github use"),(0,i.kt)("td",{parentName:"tr",align:"left"},"2")))),(0,i.kt)("h3",{id:"sample-output"},"Sample Output"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"./assignment1.py 2023-01-25 2")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"A year divided by 2 is 182 days.\nThe date 182 days ago was 2022-07-27.\nThe date 182 from now will be 2023-07-26.\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"./assignment1.py 2020-02-14 4")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"A year divided by 4 is 91 days.\nThe date 91 days ago was 2019-11-15.\nThe date 91 from now will be 2020-05-15.\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"./assignment1.py 2023-02-29 3")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Error: wrong day entered\nUsage: ./assignment1.py YYYY-MM-DD division\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"./assignment1.py 2001-13-01")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Usage: ./assignment1.py YYYY-MM-DD division\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"./assignment1.py 2001-13-01 5")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Error: wrong month entered\nUsage: ./assignment1.py YYYY-MM-DD division\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"./assignment1.py 2011-12-01 0")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Usage: ./assignment1.py YYYY-MM-DD division\n")))}d.isMDXComponent=!0}}]);