"use strict";(self.webpackChunkOPS445=self.webpackChunkOPS445||[]).push([[340],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,d=c["".concat(s,".").concat(m)]||c[m]||h[m]||i;return n?a.createElement(d,r(r({ref:t},u),{},{components:n})):a.createElement(d,r({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8246:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return r},default:function(){return h},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p}});var a=n(3117),o=(n(7294),n(3905));const i={id:"lab1",title:"Lab 1",sidebar_position:1,description:"Lab 1 For Students to Complete and Submit"},r="Lab 1: Introduction to Git, GitHub.com, and Python",l={unversionedId:"A-Labs/lab1",id:"A-Labs/lab1",title:"Lab 1",description:"Lab 1 For Students to Complete and Submit",source:"@site/docs/A-Labs/lab1.md",sourceDirName:"A-Labs",slug:"/A-Labs/lab1",permalink:"/OPS445/A-Labs/lab1",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/OPS445/tree/main/docs/A-Labs/lab1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"lab1",title:"Lab 1",sidebar_position:1,description:"Lab 1 For Students to Complete and Submit"},sidebar:"courseNotesSidebar",previous:{title:"Weekly Schedule",permalink:"/OPS445/weekly-schedule"},next:{title:"Lab 2",permalink:"/OPS445/A-Labs/lab2"}},s={},p=[{value:"Lab Objectives",id:"lab-objectives",level:2},{value:"Overview",id:"overview",level:2},{value:"Reference",id:"reference",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Investigation 1 - Set Up A Development Environment",id:"investigation-1---set-up-a-development-environment",level:2},{value:"Option 1: Create a Linux Virtual Machine",id:"option-1-create-a-linux-virtual-machine",level:3},{value:"Verify Python",id:"verify-python",level:4},{value:"Install Visual Studio Code and Extensions",id:"install-visual-studio-code-and-extensions",level:4},{value:"Option 2: Use WSL",id:"option-2-use-wsl",level:3},{value:"Verify Python on Ubuntu",id:"verify-python-on-ubuntu",level:4},{value:"Verify Python on Windows",id:"verify-python-on-windows",level:4},{value:"Install VS Code",id:"install-vs-code",level:4},{value:"Task: Verify The Python Interpreter",id:"task-verify-the-python-interpreter",level:3},{value:"Task: Create directory structure for Labs and Assignments",id:"task-create-directory-structure-for-labs-and-assignments",level:3},{value:"Create directory structure using BASH commands",id:"create-directory-structure-using-bash-commands",level:4},{value:"Investigation 2 - Git and GitHub",id:"investigation-2---git-and-github",level:2},{value:"Task 1: Create a Github.com account",id:"task-1-create-a-githubcom-account",level:3},{value:"Task 2: Configure Git On Your Development Machine",id:"task-2-configure-git-on-your-development-machine",level:3},{value:"Task 3: Add your public key to Github",id:"task-3-add-your-public-key-to-github",level:3},{value:"Task 4: Clone a Github.com repository into a new directory on a Linux system",id:"task-4-clone-a-githubcom-repository-into-a-new-directory-on-a-linux-system",level:3},{value:"Investigation 3 - Exploring and Using Python&#39;s Built-in Functions",id:"investigation-3---exploring-and-using-pythons-built-in-functions",level:2},{value:"Part 1 - Interactive (learning) mode: using the Python Interactive Shell",id:"part-1---interactive-learning-mode-using-the-python-interactive-shell",level:3},{value:"Unit Feedback Script : CheckLabX.py",id:"unit-feedback-script--checklabxpy",level:2},{value:"Part 2 - Script (execution) mode: creating Python script",id:"part-2---script-execution-mode-creating-python-script",level:3},{value:"Task 1 - Python script using builtin Functions",id:"task-1---python-script-using-builtin-functions",level:4},{value:"Investigation 4 - Exploring Python&#39;s Built-in Data Objects",id:"investigation-4---exploring-pythons-built-in-data-objects",level:2},{value:"String Objects",id:"string-objects",level:3},{value:"Integer Objects",id:"integer-objects",level:3},{value:"Investigation 5 - Exploring on How to Get Python to do Math",id:"investigation-5---exploring-on-how-to-get-python-to-do-math",level:2},{value:"Lab 1 Sign-Off",id:"lab-1-sign-off",level:2},{value:"Upload the following files individually to Blackboard",id:"upload-the-following-files-individually-to-blackboard",level:3},{value:"Complete the GitHub Submission",id:"complete-the-github-submission",level:3},{value:"Lab Review",id:"lab-review",level:2}],u={toc:p};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lab-1-introduction-to-git-githubcom-and-python"},"Lab 1: Introduction to Git, GitHub.com, and Python"),(0,o.kt)("h2",{id:"lab-objectives"},"Lab Objectives"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set up a development environment for the course"),(0,o.kt)("li",{parentName:"ul"},'Using the "git clone" command to clone a repository into a new directory'),(0,o.kt)("li",{parentName:"ul"},"Set up account on github.com for creating, tracking, and managing a repository"),(0,o.kt)("li",{parentName:"ul"},"Configure and explore the Python interpreter")),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this lab, you will create Linux virtual machine to complete your course work. Additionally you will create an account on Github to explore the basic workflow of using version control. The essential operations provided by Github includes"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"cloning a new repository,"),(0,o.kt)("li",{parentName:"ul"},"making changes to files,"),(0,o.kt)("li",{parentName:"ul"},"creating a commit, and"),(0,o.kt)("li",{parentName:"ul"},"pushing your changes."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finally, study, create and execute simple Python scripts."))),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf"},"GitHub git Cheat Sheet")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://guides.github.com/activities/hello-world/"},"GitHub Hello World Guide"))),(0,o.kt)("h2",{id:"glossary"},"Glossary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"git - a distributed revision control system with rich command set that provides both high-level operations and full access to git's internals."),(0,o.kt)("li",{parentName:"ul"},"github.com - a code hosting platform for version control and collaboration that lets people work together on software projects from anywhere.")),(0,o.kt)("h2",{id:"investigation-1---set-up-a-development-environment"},"Investigation 1 - Set Up A Development Environment"),(0,o.kt)("p",null,"In order to proceed in the course you're going to need a Linux-based development environment. The requirements for this development environment are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"it has a version of Python 3 installed,"),(0,o.kt)("li",{parentName:"ul"},"it has a version of git installed,"),(0,o.kt)("li",{parentName:"ul"},"it has a web browser installed, and"),(0,o.kt)("li",{parentName:"ul"},"it has a text editor with modern development tools installed. (syntax highlighting, linting, etc.)")),(0,o.kt)("p",null,"You have options in how you set this up. If the computer you will be using for this course is powerful and has at least 16 GB of RAM, you will probably want to set up a Virtual Machine. Otherwise, skip this step and proceed to ",(0,o.kt)("strong",{parentName:"p"},"Use WSL")," below."),(0,o.kt)("h3",{id:"option-1-create-a-linux-virtual-machine"},"Option 1: Create a Linux Virtual Machine"),(0,o.kt)("p",null,"We will demonstrate the steps for setting up a Linux Mint Virtual Machine with Visual Studio Code installed. A ",(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/NhIKNYxCNps"},"short video")," is available to walk you through the process."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Find the ",(0,o.kt)("a",{parentName:"li",href:"https://www.virtualbox.org"},"VirtualBox Website")," and follow the instructions to install VirtualBox for your specific operating system."),(0,o.kt)("li",{parentName:"ul"},"Download the Linux Mint ISO file from ",(0,o.kt)("a",{parentName:"li",href:"https://www.linuxmint.com"},"Linux Mint Website"),"."),(0,o.kt)("li",{parentName:"ul"},"Create a new virtual machine from this ISO file. Your virtual machine should have ",(0,o.kt)("strong",{parentName:"li"},"at least 8GB of memory and 20GB of hard drive space"),", and you can leave all other hardware specs as default."),(0,o.kt)("li",{parentName:"ul"},"Start up your virtual machine, and at the graphical start menu select 'Install on your computer.'"),(0,o.kt)("li",{parentName:"ul"},"Your installer will now be displayed. Set language, timezone, and accept defaults for drive partitioning. Enter your username and password."),(0,o.kt)("li",{parentName:"ul"},"Allow the installation to complete, and then reboot your machine."),(0,o.kt)("li",{parentName:"ul"},"When the Virtual Machine has rebooted, you should see a welcome screen along with some more configuration options."),(0,o.kt)("li",{parentName:"ul"},"Enter your name, and a password. Don't forget this password, as you will need it to become root.")),(0,o.kt)("h4",{id:"verify-python"},"Verify Python"),(0,o.kt)("p",null,"Linux Mint should have the required software (with the exception of VS Code) already installed. We will verify this before moving on."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open a terminal by clicking on the start button in the bottom-left corner."),(0,o.kt)("li",{parentName:"ul"},"Enter the command ",(0,o.kt)("strong",{parentName:"li"},"python3 --version")," and verify that the installed version is at least ",(0,o.kt)("strong",{parentName:"li"},"python 3.11.")," If no version of Python is installed, run ",(0,o.kt)("strong",{parentName:"li"},"sudo apt install python3"),"."),(0,o.kt)("li",{parentName:"ul"},"Enter the command ",(0,o.kt)("strong",{parentName:"li"},"git --version")," and verify that the installed version is at least ",(0,o.kt)("strong",{parentName:"li"},"git 1.2.")," If no version of Python is installed, run ",(0,o.kt)("strong",{parentName:"li"},"sudo apt install git"),"."),(0,o.kt)("li",{parentName:"ul"},"Run ",(0,o.kt)("strong",{parentName:"li"},"sudo apt update && sudo apt upgrade")," to update the system software.")),(0,o.kt)("h4",{id:"install-visual-studio-code-and-extensions"},"Install Visual Studio Code and Extensions"),(0,o.kt)("p",null,"Visual Studio Code has an excellent Debugger for Python, and so it is the recommended editor for this course. However, you may use a different editor at your discretion. Pycharm Community also has a very good debugger, works on Linux Mint, and is free for students."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We will need to add the Microsoft Repository to our list of accepted repositories. These instructions are on ",(0,o.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/docs/setup/linux#_debian-and-ubuntu-based-distributions"},"The Microsoft page"),"."),(0,o.kt)("li",{parentName:"ul"},"Launch Visual Studio Code. Click the Start button and type 'code', you should see the launcher for Visual Studio Code appear."),(0,o.kt)("li",{parentName:"ul"},"Now install the Python extension. Press ",(0,o.kt)("strong",{parentName:"li"},"Control+Shift+x")," to open Extensions in the sidebar. (Or click on the Extensions icon on left side of the window)."),(0,o.kt)("li",{parentName:"ul"},"Type 'Python' into the search bar, and click 'Install' when you find the extension created by Microsoft. You may wish to explore other extensions to customize your workspace.")),(0,o.kt)("h3",{id:"option-2-use-wsl"},"Option 2: Use WSL"),(0,o.kt)("p",null,"If your computer has less than 16 GB of RAM and has problems running a full virtual machine, you may choose to use Windows Subsystem for Linux (WSL) instead. This will provide a minimal Linux environment. A ",(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/FXLrigSSlXI"},"short video")," is available to view."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'Open "Windows Store".'),(0,o.kt)("li",{parentName:"ul"},'Search for "Ubuntu" and install the app that is published by Canonical.'),(0,o.kt)("li",{parentName:"ul"},"Launch Ubuntu from the Start Menu. You will have a terminal-based Linux interface only. To access your Windows files, type cd /mnt/c. This will get you to the top of your Windows C drive.")),(0,o.kt)("h4",{id:"verify-python-on-ubuntu"},"Verify Python on Ubuntu"),(0,o.kt)("p",null,"Ubuntu should have the required software (with the exception of VS Code) already installed. We will verify this before moving on."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Enter the command ",(0,o.kt)("strong",{parentName:"li"},"python3 --version")," and verify that the installed version is at least ",(0,o.kt)("strong",{parentName:"li"},"python 3.4.")," If no version of Python is installed, run ",(0,o.kt)("strong",{parentName:"li"},"sudo apt install python3"),"."),(0,o.kt)("li",{parentName:"ul"},"Enter the command ",(0,o.kt)("strong",{parentName:"li"},"git --version")," and verify that the installed version is at least ",(0,o.kt)("strong",{parentName:"li"},"git 1.2.")," If no version of Python is installed, run ",(0,o.kt)("strong",{parentName:"li"},"sudo apt install git"),"."),(0,o.kt)("li",{parentName:"ul"},"Run ",(0,o.kt)("strong",{parentName:"li"},"sudo apt update && sudo apt upgrade")," to update the system software.")),(0,o.kt)("h4",{id:"verify-python-on-windows"},"Verify Python on Windows"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open your Windows command prompt and type ",(0,o.kt)("strong",{parentName:"li"},"python --version"),". If no version of Python is installed, it should give you instructions in how to install it, or go to ",(0,o.kt)("a",{parentName:"li",href:"https://www.python.org/downloads/"},"the Python Homepage"),".")),(0,o.kt)("h4",{id:"install-vs-code"},"Install VS Code"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Follow the instructions to ",(0,o.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/download"},"install VS Code on Windows"),". Now you will be able to complete most tasks on Windows, and switch to a minimal Linux environment when needed.")),(0,o.kt)("h3",{id:"task-verify-the-python-interpreter"},"Task: Verify The Python Interpreter"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A few background information about the Python programming language")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The Python Interpreter understanding the Python language and this is why we are going to learn this programming language in this course."),(0,o.kt)("li",{parentName:"ul"},"The Python Language supports both object-oriented programming and procedural programming paradigms."),(0,o.kt)("li",{parentName:"ul"},"The Python programming environment consists of a few basic components: language keywords, symbols, modules, and data objects."),(0,o.kt)("li",{parentName:"ul"},"The Python Interpreter supports two mode of operations: script mode and interactive mode."),(0,o.kt)("li",{parentName:"ul"},"In interactive mode, the Python interpreter allows us to run python code one statement at a time. Currently, there are two major versions of the Python interpreter available: version 2 and version3."),(0,o.kt)("li",{parentName:"ul"},'To start an interactive Python version 2 shell, type "python" at the command prompt. Python 2 is deprecated and should not be used for any new projects.'),(0,o.kt)("li",{parentName:"ul"},'To start an interactive Python version 3 shell, type "python3" at the command prompt.'),(0,o.kt)("li",{parentName:"ul"},"To exit from the interactive Python shell, press Ctrl+d.")),(0,o.kt)("h3",{id:"task-create-directory-structure-for-labs-and-assignments"},"Task: Create directory structure for Labs and Assignments"),(0,o.kt)("h4",{id:"create-directory-structure-using-bash-commands"},"Create directory structure using BASH commands"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Lets setup and reserve the following directories for storing and organizing files for labs and assignments. Execute the following commands at the command prompt:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir ~/ops445\nmkdir ~/ops445/lab1\nmkdir ~/ops445/lab2\nmkdir ~/ops445/lab3\nmkdir ~/ops445/lab4\nmkdir ~/ops445/lab5\nmkdir ~/ops445/lab6\nmkdir ~/ops445/lab7\nmkdir ~/ops445/lab8\nmkdir ~/ops445/a1\nmkdir ~/ops445/a2\n")),(0,o.kt)("h2",{id:"investigation-2---git-and-github"},"Investigation 2 - Git and GitHub"),(0,o.kt)("h3",{id:"task-1-create-a-githubcom-account"},"Task 1: Create a Github.com account"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Start your web browser and go to github.com and use your own email to sign up for a new github account if you don't already have one.\n",(0,o.kt)("strong",{parentName:"li"},"[","Note: Please be aware that Seneca's spam filter block email from github.com by default, if you use your Seneca email to sign up for an account on github.com, you might have to re-configure your email spam filter to allow confirmation email from github.com to reach your inbox.","]"))),(0,o.kt)("h3",{id:"task-2-configure-git-on-your-development-machine"},"Task 2: Configure Git On Your Development Machine"),(0,o.kt)("p",null,"Please note that git and GitHub are independent of one another, so you will also need to set up some things locally with git. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If it isn't still running, start the VM you just created for the course, and open a terminal. Enter the following commands:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'git config --global user.name "Firstname Lastname"\ngit config --global user.email "mysenecaid@myseneca.ca"\ngit config --global pull.rebase false\n')),(0,o.kt)("p",null,"Please note ",(0,o.kt)("strong",{parentName:"p"},"you must use your valid myseneca email address")," in this configuration, otherwise you may not get credit for some of your work. You will need to configure this ",(0,o.kt)("strong",{parentName:"p"},"for each machine you are using for lab work"),"."),(0,o.kt)("h3",{id:"task-3-add-your-public-key-to-github"},"Task 3: Add your public key to Github"),(0,o.kt)("p",null,"Follow the Github guide ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account"},"here")," to add your public key to your profile:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add one public key for each computer/VM you will be using for the course."),(0,o.kt)("li",{parentName:"ul"},"Run ",(0,o.kt)("inlineCode",{parentName:"li"},"ls -la ~/.ssh")," and look for a public key file such as ",(0,o.kt)("strong",{parentName:"li"},"id_ed25519.pub"),". If no file exists, generate a new keypair using ",(0,o.kt)("inlineCode",{parentName:"li"},"ssh-keygen"),"."),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"cat <public key filename>")," to display the contents of the public key, and then select and copy the text."),(0,o.kt)("li",{parentName:"ul"},"Open Github in your web browser. Log in, select ",(0,o.kt)("strong",{parentName:"li"},"Settings -",">"," SSH and GPG Keys"),". Create new key, and paste your public key contents into the text box.")),(0,o.kt)("p",null,"You will now have permission to clone repositories using ",(0,o.kt)("strong",{parentName:"p"},"SSH"),"."),(0,o.kt)("h3",{id:"task-4-clone-a-githubcom-repository-into-a-new-directory-on-a-linux-system"},"Task 4: Clone a Github.com repository into a new directory on a Linux system"),(0,o.kt)("p",null,"If your professor is asking you to submit labs on GitHub, follow their instructions now to clone the lab1 repository."),(0,o.kt)("p",null,"Otherwise, download the sample.py script from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ahadalioglu/ops445-lab1"},"https://github.com/ahadalioglu/ops445-lab1")," repository to ~/ops445/lab1 directory"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Study and Explore the sample.py python script and identify the following sections:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"the shebang line"),(0,o.kt)("li",{parentName:"ul"},"the script level docstring"),(0,o.kt)("li",{parentName:"ul"},"the import section to import functions from the standard library module"),(0,o.kt)("li",{parentName:"ul"},"the function definition section"),(0,o.kt)("li",{parentName:"ul"},"the main script section"))),(0,o.kt)("li",{parentName:"ul"},"Also identify the following items appear in the sample.py script:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"the Python keywords"),(0,o.kt)("li",{parentName:"ul"},"the decision code segment"),(0,o.kt)("li",{parentName:"ul"},"the looping code segment"),(0,o.kt)("li",{parentName:"ul"},"the run time error (exception) handling code segment"))),(0,o.kt)("li",{parentName:"ul"},"Run the sample script with the following given command line options and study its output:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"python3 sample.py\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"python3 sample.py test\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"python3 sample.py 2>/dev/null\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"python3 sample.py test 2>/dev/null\n")),(0,o.kt)("h2",{id:"investigation-3---exploring-and-using-pythons-built-in-functions"},"Investigation 3 - Exploring and Using Python's Built-in Functions"),(0,o.kt)("h3",{id:"part-1---interactive-learning-mode-using-the-python-interactive-shell"},"Part 1 - Interactive (learning) mode: using the Python Interactive Shell"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In this mode, you can instruct the Python Interpreter to execute python statement or python expression one at a time, call a function, or display the representation of a python data object."),(0,o.kt)("li",{parentName:"ul"},"To start the Python version 3 Interactive shell, type the command")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"[eric.brauer@mtrx-node05pd lab1]$ python3\n")),(0,o.kt)("p",null,"at the Linux command prompt."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You should get a startup message similar to the following:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'[eric.brauer@mtrx-node05pd lab1]$ python3\nPython 3.6.8 (default, Apr  2 2020, 13:34:55) \n[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on Linux\nType "help", "copyright", "credits" or "license" for more information.\n>>>\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Note that when you see the ",(0,o.kt)("strong",{parentName:"p"},">",">",">")," Python interactive shell prompt, which indicates that the Python Interpreter is listening and waiting to carry out your instruction written in the ",(0,o.kt)("strong",{parentName:"p"},"Python language"),". Try the following commands at the python command prompt, and record their outputs for future reference:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},">",">",">"," copyright"),(0,o.kt)("li",{parentName:"ul"},">",">",">"," credits"),(0,o.kt)("li",{parentName:"ul"},">",">",">"," license"),(0,o.kt)("li",{parentName:"ul"},">",">",">"," help"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The output of the last command should tell you how to enter the interactive help, or how to get help on a ",(0,o.kt)("strong",{parentName:"p"},"Python Object"),". You should see the following message when entering the interactive help utility:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'Welcome to Python 3.6\'s help utility!\n\nIf this is your first time using Python, you should definitely check out\nthe tutorial on the Internet at https://docs.python.org/3.6/tutorial/.\n\nEnter the name of any module, keyword, or topic to get help on writing\nPython programs and using Python modules.  To quit this help utility and\nreturn to the interpreter, just type "quit".\n\nTo get a list of available modules, keywords, symbols, or topics, type\n"modules", "keywords", "symbols", or "topics".  Each module also comes\nwith a one-line summary of what it does; to list the modules whose name\nor summary contain a given string such as "spam", type "modules spam".\n\nhelp>\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Please note that the prompt changed from ",(0,o.kt)("strong",{parentName:"li"},">",">",">")," to ",(0,o.kt)("strong",{parentName:"li"},"help",">"),". Try the suggestion and feel free to explore the interactive help utility. Simple press the ",(0,o.kt)("strong",{parentName:"li"},"Enter")," key to get out of the interactive help utility."),(0,o.kt)("li",{parentName:"ul"},"At the ",(0,o.kt)("strong",{parentName:"li"},">",">",">")," prompt, type ",(0,o.kt)("strong",{parentName:"li"},"dir()")," to call the built-in function named ",(0,o.kt)("strong",{parentName:"li"},"dir")," without passing any function argument to it. The ",(0,o.kt)("strong",{parentName:"li"},"dir()")," function will return a list of data object names known to the Python interpreter at that moment. You should get a list of items similar to the following:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},">>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'x']\n>>>\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We are interested in the ",(0,o.kt)("strong",{parentName:"li"},"object")," named ",(0,o.kt)("strong",{parentName:"li"},"_","_","builtins","_","_")," at this moment. We can ask the Python interpreter to tell us more about the ",(0,o.kt)("strong",{parentName:"li"},"_","_","builtins","_","_")," object by passing its name ",(0,o.kt)("strong",{parentName:"li"},"_","_","builtins","_","_")," as the function argument to the ",(0,o.kt)("strong",{parentName:"li"},"dir()")," function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},">>> dir(__builtins__)\n['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', \n...\nValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__', '__debug__', '__doc__',\n'__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any',\n'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', \n'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', \n'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',\n'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', \n'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', \n'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', \n'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', \n'type', 'vars', 'zip']\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The above output shows a list of the so-called ",(0,o.kt)("strong",{parentName:"li"},"built-in run-time error codes")," and ",(0,o.kt)("strong",{parentName:"li"},"built-in function names"),". We are going to learn how to use them effectively in order to save our coding effort when writing Python programs/scripts."),(0,o.kt)("li",{parentName:"ul"},"Let starts with the following built-in functions:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"print()"),(0,o.kt)("li",{parentName:"ul"},"help()"),(0,o.kt)("li",{parentName:"ul"},"type()"))),(0,o.kt)("li",{parentName:"ul"},"We can learn more about the above built-in functions within the Python interactive shell. Study the output of the following command at the ",(0,o.kt)("strong",{parentName:"li"},">",">",">")," prompt and keep a record of them for future reference:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},">>> help(help)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},">>> help(print)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},">>> help(type)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},">>> type(type)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},">>> type(help)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},">>> type(print)\n")),(0,o.kt)("h2",{id:"unit-feedback-script--checklabxpy"},"Unit Feedback Script : CheckLabX.py"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Unit Feedback Scripts")),(0,o.kt)("p",null,"Each ",(0,o.kt)("strong",{parentName:"p"},"Part")," (within an 'Investigation) is referred to as a ",(0,o.kt)("strong",{parentName:"p"},"Unit"),". Each Unit will require that the student download and run a ",(0,o.kt)("strong",{parentName:"p"},"Unit Feedback Script"),', which provides the OPS445 student "real-time feedback" of their completed work.'),(0,o.kt)("p",null,"This feedback is not considered to be perfect or fool-proof; however, it may provide feedback (hints) in case a student gets stuck or experiences an error when performing administration tasks or when creating their Python scripts. These unit feedback scripts can also be used to confirm that the student's Python script is on the right track, and provide a consistent record of their Python scripting progress throughout their labs."),(0,o.kt)("h3",{id:"part-2---script-execution-mode-creating-python-script"},"Part 2 - Script (execution) mode: creating Python script"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In this part we will start writing our very first python script. The scripts we are going to try will be very basic and it is use to help us practice the language syntax and explore the foundational coding skills, such as:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"sending text to the screen,"),(0,o.kt)("li",{parentName:"ul"},"storing value in an data object")))),(0,o.kt)("h4",{id:"task-1---python-script-using-builtin-functions"},"Task 1 - Python script using builtin Functions"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},'Creating the "Hello World" Python Script')),(0,o.kt)("p",null,'You will learn to create a simple python script in this section. This python script will just call the Python builtin function print() to send the text "hello world" to the screen. The "hello world" is an old traditional first program students usually are taught to create, which is based on the first programming example from the first C programming text co-written by Dennis Ritchie, the creator of the C programming language and Brian Kernighan. You will learn how to run the Python script in the Python3 shell as well as to learn how to run the Python script from the bash shell.'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Perform the following steps:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'Create a new Python file in your ~/ops445/lab1 directory. Call it lab1a.py. The first Python code we will write is going to call the print() function. A function is code that has been defined somewhere. Functions can take arguments, use these arguments in some way, and then usually, but not always, return a result. The first function we will use is the "print()" functions, it\'s sole purpose is to send data to the screen.'),(0,o.kt)("li",{parentName:"ol"},"Add the following line into your source code file:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print()\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"And run it from the command-line:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"python3 ./lab1a.py\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'You will notice that nothing is printed even though we called the "print()" function. This is because we didn\'t pass any arguments to it, lets try again.')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Modify your call to print() to include an argument ('hello world'):")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print('hello world')\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This time we should now see that the python function \"print()\" has sent something to the screen - the words 'hello world'. In Python a word or a bunch of characters like 'hello world' is called a 'string'. In the above example, a ",(0,o.kt)("strong",{parentName:"li"},"string")," was passed as an ",(0,o.kt)("strong",{parentName:"li"},"argument")," to the ",(0,o.kt)("strong",{parentName:"li"},"print function"),". These words are important for understanding and talking about different aspects of code.")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Note that there are similarities between the Python print() function and the Bash echo command, but Python is more picky than bash (which is a good thing). Try to run print without the brackets or without the quotes to see what happens.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Reading errors")),(0,o.kt)("p",null,"One of the things that makes a good programmer is debugging skills. The first and most important debugging technique is reading and understanding error messages. Try to understand what the errors are saying even if you think you already know what the problem is and already have some idea about how to fix it."),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Write the following code into our Python file. Note the she-bang line at the top of the file to run this script in the python3 environment. You will need to add this she-bang line for all python scripts you create for this course.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"#!/usr/bin/env python3\n'''Description: This program will output \"hello world\" to the screen.'''\n\n# Any line that starts with a \"#\" is also known as a comment,\n# these lines are ignored by the python interpreter even if\n# they contain code. The very first line is called a Shebang line, \n# it is used to tell the system which interpreter to \n# use(python2, python3, bash, etc). \n\nprint('Hello world')\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Another way of running a Python program is executing it directly, e.g.:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"./lab1a.py\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Note that the file will need execute permissions even though you ran it just fine earlier. Why is that?")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Submitting Your Lab Work Through GitHub")),(0,o.kt)("p",null,"If you cloned your lab through GitHub, perform the following now:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"cd ~/ops445/lab1/\npwd #confirm that you are in the right directory\nls lab1a.py #confirm that you have the lab1a.py script in your directory\npython3 ./CheckLab1.py -f -v lab1a\n")),(0,o.kt)("p",null,'Before moving on to the next step make sure you identify any and all errors in "lab1a.py". When the check script tells you everything is "ok", you may commit your changes.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'git add lab1a.py\ngit commit -m "Added lab1a"\ngit push\n')),(0,o.kt)("p",null,"Your first script is now submitted. The process for each part of the lab will be similar."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Submitting Your Lab Work Through Blackboard")),(0,o.kt)("p",null,"If you did not clone your lab through GitHub, you may download the check script by following these steps:"),(0,o.kt)("p",null,"Download the check script and check your work. Enter the following commands from the bash shell."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/ops445/lab1/\npwd #confirm that you are in the right directory\nls lab1a.py #confirm that you have the lab1a.py script in your directory\nls CheckLab1.py || wget 'https://github.com/senecaops445/lab1-template/blob/main/CheckLab1.py?raw=true' -O CheckLab1.py\npython3 ./CheckLab1.py -f -v lab1a\n")),(0,o.kt)("p",null,'Before moving on to the next step make sure you identify any and all errors in "lab1a.py". When the check script tells you everything is "ok", you may proceed to the next step.'),(0,o.kt)("h2",{id:"investigation-4---exploring-pythons-built-in-data-objects"},"Investigation 4 - Exploring Python's Built-in Data Objects"),(0,o.kt)("p",null,"In Python, a data object is used to store data for use later in the program. This data can be a string, integer, decimal number, characters, etc. We will only be covering string and integer objects in this lab. You will learn and use other Python built-in data object types in future labs."),(0,o.kt)("h3",{id:"string-objects"},"String Objects"),(0,o.kt)("p",null,"String objects contain text to be used in your program. Examples of strings could be user-names, full-names, item descriptions, etc. We will now demonstrate how to assign a string to an object and how to display contents stored in a string object."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Perform the following steps:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a python script (called lab1b.py) and first - start with a few simple things to try:"),(0,o.kt)("li",{parentName:"ol"},"Let's make a new object containing a value:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"name =  'Thomas'\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Print the value to the screen:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(name)\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Think about why this does something different:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print('name')\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Now lets try something new, we are going to print out the string and concatenate/combine it with another string. The plus sign can be used to join two strings together. However, make sure that the name of your object is always outside the quotes, or it will not resolve to a value.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print('I have a friend named ' + name)\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"To gain practice, complete your Python script with the following content and details:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The script should have a Shebang line like you did for your lab1a.py python script"),(0,o.kt)("li",{parentName:"ul"},'The script should use a single object called "name"'),(0,o.kt)("li",{parentName:"ul"},'The value of the "name" object should be "Isaac"'),(0,o.kt)("li",{parentName:"ul"},'The script, when executed, should print out "How old are you Isaac?"'),(0,o.kt)("li",{parentName:"ul"},"Sample run:")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"cd ~/ops445/lab1/\n./lab1b.py\n \nHow old are you Isaac?\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Try the checking script as you are working through a script to sometimes get hints.")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"Download and run the checking script. Enter the following commands from the ",(0,o.kt)("strong",{parentName:"li"},"bash shell"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/ops445/lab1/\npwd #confirm that you are in the right directory\nls CheckLab1.py || wget 'https://github.com/senecaops445/lab1-template/blob/main/CheckLab1.py?raw=true' -O CheckLab1.py\npython3 ./CheckLab1.py -f -v lab1b\n")),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},'Before proceeding, make certain that you identify any and all errors in "lab1b.py". When the check script tells you everything is "ok", you may proceed to the next step.'),(0,o.kt)("li",{parentName:"ol"},"If using GitHub, repeat the steps to commit your lab1b.py file.")),(0,o.kt)("h3",{id:"integer-objects"},"Integer Objects"),(0,o.kt)("p",null,"In Python, integer objects are used to store an integer numbers that can be used for mathematical operations (discussed in the next section). Integers do NOT contain decimals, and they can be signed (+ or -) or unsigned. Here we will store integers in a object, perform math operations, and display the results."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Perform the following steps:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a python script (called lab1c.py) and first - start with a few simple things to try:"),(0,o.kt)("li",{parentName:"ol"},"Lets create two new objects, num1 and num2, to play with.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"num1 = 5\nnum2 = 10\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"You can print the values in those integer objects:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(num1)\nprint(num2)\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},'Now we will make a new object called "sum", and try some math:')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"sum = num1 + num2\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'This will add the values contained in the integer objects together and assign the result to the object named "sum". However you will note that there is no data show up on the screen. Let\'s inspect the contents of the new object named "sum":')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(sum)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Does this value look right? Are you sure?")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Now lets try printing this sum out with a string:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print('The sum is: ' + sum)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"What happened? Did you receive an error? This may have been the first time you've seen this error, but it won't be the last. What we tried to do is combine a string with a number, and this won't work."),(0,o.kt)("li",{parentName:"ul"},'In order concatenate a sting and an integer object, we will have to use another builtin function called "str()" to convert an integer object to a string first. The "str()" function will return a string of your number and provide it as a argument to "print()". This function will not change the value of your object, your object is still an integer object.')),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Issue the following:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print('The sum is: ' + str(sum))\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"What did you notice this time?")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To gain practice, complete your python script with the following features:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The script should have a Shebang line."),(0,o.kt)("li",{parentName:"ul"},"The script should have an object called ",(0,o.kt)("strong",{parentName:"li"},"name")),(0,o.kt)("li",{parentName:"ul"},"The script should have an object called ",(0,o.kt)("strong",{parentName:"li"},"age")),(0,o.kt)("li",{parentName:"ul"},"The value of the ",(0,o.kt)("strong",{parentName:"li"},"name")," object should be ",(0,o.kt)("strong",{parentName:"li"},"Isaac")),(0,o.kt)("li",{parentName:"ul"},"The object ",(0,o.kt)("strong",{parentName:"li"},"age")," should contain a integer"),(0,o.kt)("li",{parentName:"ul"},"The value of the ",(0,o.kt)("strong",{parentName:"li"},"age")," object should be ",(0,o.kt)("strong",{parentName:"li"},"72")),(0,o.kt)("li",{parentName:"ul"},'The script, when executed, should print out "Isaac is 72 years old!"'),(0,o.kt)("li",{parentName:"ul"},"Example run:")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/ops445/lab1/\n./lab1c.py\nIsaac is 72 years old!\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Try the check script as you are working through a script to sometimes get hints.")),(0,o.kt)("ol",{start:10},(0,o.kt)("li",{parentName:"ol"},"Download and run the checking script. Enter the following commands from the bash shell:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/ops445/lab1/\npwd #confirm that you are in the right directory\nls CheckLab1.py || wget 'https://github.com/senecaops445/lab1-template/blob/main/CheckLab1.py?raw=true' -O CheckLab1.py\npython3 ./CheckLab1.py -f -v lab1c\n")),(0,o.kt)("ol",{start:11},(0,o.kt)("li",{parentName:"ol"},'Before moving on to the next step make sure you identify any and all errors in "lab1c.py". When the check script tells you everything is "ok", you may proceed to the next step. Add lab1c.py to the repo and commit the change.')),(0,o.kt)("h2",{id:"investigation-5---exploring-on-how-to-get-python-to-do-math"},"Investigation 5 - Exploring on How to Get Python to do Math"),(0,o.kt)("p",null,"In the previous section, you performed a couple of simple mathematical operations. In this section, you will learn some additional mathematical operations."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Perform the following steps:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Try some of the following to see what happens in Python:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(10 + 5)    # addition\nprint(10 - 5)    # subtraction\nprint(10 * 5)    # multiplication\nprint(10 / 5)    # division\nprint(10 ** 5)   # exponents\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"NOTE: You must be careful when combining more complex math operators together. Python uses ",(0,o.kt)("strong",{parentName:"p"},"PEMDAS")," (",(0,o.kt)("strong",{parentName:"p"},"P"),"arentheses, ",(0,o.kt)("strong",{parentName:"p"},"E"),"xponents, ",(0,o.kt)("strong",{parentName:"p"},"M"),"ultiplication and ",(0,o.kt)("strong",{parentName:"p"},"D"),"ivision, ",(0,o.kt)("strong",{parentName:"p"},"A"),"ddition and ",(0,o.kt)("strong",{parentName:"p"},"S"),"ubtraction) to resolve math."),(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"Go over the below examples and see if you understand each situation:")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print(10 + 5 * 2)       # multiplication happens before addition\nprint((10 + 5) * 2)         # parentheses happen before multiplication\nprint(10 + 5 * 2 - 10 ** 2) # first exponents, then multiplication, then addition and subtraction from left-to-right\nprint(15 / 3 * 4)       # division and multiplication happen from left-to-right\nprint(100 / ((5 + 5) * 2))  # the inner most parentheses are first performing addition, then parentheses again with multiplication, finally the division\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To gain practice, complete your script with the following content and details:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The script should have a Shebang line."),(0,o.kt)("li",{parentName:"ul"},"The object ",(0,o.kt)("strong",{parentName:"li"},"x")," should contain a integer with the value ",(0,o.kt)("strong",{parentName:"li"},"10")),(0,o.kt)("li",{parentName:"ul"},"The object ",(0,o.kt)("strong",{parentName:"li"},"y")," should contain a integer with the value ",(0,o.kt)("strong",{parentName:"li"},"2")),(0,o.kt)("li",{parentName:"ul"},"The object ",(0,o.kt)("strong",{parentName:"li"},"z")," should contain a integer with the value ",(0,o.kt)("strong",{parentName:"li"},"5")),(0,o.kt)("li",{parentName:"ul"},'The script, when executed, should print out "10 + 2 * 5 = 20" (the printout should change if the values in the objects change)')))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Example run:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/ops445/lab1/\n./lab1d.py\n10 + 2 * 5 = 20\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Try the checking script as you are working through a script to sometimes get hints.")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Download and run the checking script. Enter the following commands from the bash shell:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/ops445/lab1/\npwd #confirm that you are in the right directory\nls CheckLab1.py || wget 'https://github.com/senecaops445/lab1-template/blob/main/CheckLab1.py?raw=true' -O CheckLab1.py\npython3 ./CheckLab1.py -f -v lab1d\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'Before moving on to the next step make sure you identify any and all errors in "lab1d.py".')),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},'When the check script tells you everything is "ok", you may proceed to the next step. Add your file to the repo, and make a commit.')),(0,o.kt)("h2",{id:"lab-1-sign-off"},"Lab 1 Sign-Off"),(0,o.kt)("p",null,"Again, you will be asked to submit the lab in one of two ways:"),(0,o.kt)("h3",{id:"upload-the-following-files-individually-to-blackboard"},"Upload the following files individually to Blackboard"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run the CheckLab1.py script and capture the result")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"python3 ./CheckLab1.py -f -v &> laboutput.txt\n")),(0,o.kt)("p",null,"Submit the following files individually to Blackboard:"),(0,o.kt)("ul",{className:"contains-task-list"},(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,o.kt)("inlineCode",{parentName:"li"},"lab1output.txt")),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",(0,o.kt)("inlineCode",{parentName:"li"},"lab1a.py"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"lab1b.py"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"lab1c.py"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"lab1d.py"))),(0,o.kt)("h3",{id:"complete-the-github-submission"},"Complete the GitHub Submission"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run the CheckLab1.py script and capture the result")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'python3 ./CheckLab1.py -f -v &> laboutput.txt\ngit add laboutput.txt\ngit commit -m "completed lab"\ngit push\n')),(0,o.kt)("h2",{id:"lab-review"},"Lab Review"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"What is a git repository?")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"What kinds of data can be stored in a git repository?")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"What is a git branch?")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"What is the name of the definitive branch in a git repository?")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'What is a "pull request" related to a branch in a git repository?')),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Write Python code that when run, will perform the following tasks:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Contain a she-bang line"),(0,o.kt)("li",{parentName:"ol"},"Display a greetings message to the user"),(0,o.kt)("li",{parentName:"ol"},"display an empty line (",(0,o.kt)("strong",{parentName:"li"},"hint"),": use the special character ",(0,o.kt)("strong",{parentName:"li"},"\\n")," to print the a new-line character)"),(0,o.kt)("li",{parentName:"ol"},'Display text, "',(0,o.kt)("strong",{parentName:"li"},"Your current directory is:"),'" (You are NOT required to display quotation marks)'),(0,o.kt)("li",{parentName:"ol"},"Display the current working directory pathname (using an appropriate command)"),(0,o.kt)("li",{parentName:"ol"},"Display another empty line"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"How do you execute a Python script when you are within the interactive python3 shell? (Hint: make use of a function provided by the os python module.)")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"How do you execute a Python script when you are in the Bash Shell (i.e. NOT within the python3 shell)?")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Write the pipeline command to check if the CheckLab1.py checking script exists, and download it from the location: ",(0,o.kt)("a",{parentName:"p",href:"https://ict.senecacollege.ca/~eric.brauer/ops445/labs/LabCheckScripts/CheckLab1.py"},"https://ict.senecacollege.ca/~eric.brauer/ops445/labs/LabCheckScripts/CheckLab1.py")))))}h.isMDXComponent=!0}}]);