"use strict";(self.webpackChunkOPS445=self.webpackChunkOPS445||[]).push([[923],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5015:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p}});var a=n(3117),r=(n(7294),n(3905));const l={id:"reference-sheet",title:"Reference Sheet",sidebar_position:5,description:"Reference Sheet For Acceptable Code For Assessments"},i="OPS445 Reference Sheet For Assessments",o={unversionedId:"C-ExtraResources/reference-sheet",id:"C-ExtraResources/reference-sheet",title:"Reference Sheet",description:"Reference Sheet For Acceptable Code For Assessments",source:"@site/docs/C-ExtraResources/reference.md",sourceDirName:"C-ExtraResources",slug:"/C-ExtraResources/reference-sheet",permalink:"/OPS445/C-ExtraResources/reference-sheet",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/OPS445/tree/main/docs/C-ExtraResources/reference.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"reference-sheet",title:"Reference Sheet",sidebar_position:5,description:"Reference Sheet For Acceptable Code For Assessments"},sidebar:"courseNotesSidebar",previous:{title:"Using Codespaces",permalink:"/OPS445/C-ExtraResources/codespaces"}},s={},p=[{value:"First Quiz",id:"first-quiz",level:2},{value:"Shebang",id:"shebang",level:3},{value:"Built-in Functions",id:"built-in-functions",level:3},{value:"Conditions",id:"conditions",level:3},{value:"Loops",id:"loops",level:3},{value:"Command Line Arguments",id:"command-line-arguments",level:3},{value:"Import Keywords",id:"import-keywords",level:3},{value:"Comparison Operators",id:"comparison-operators",level:3},{value:"Logical Operators",id:"logical-operators",level:3},{value:"Math Operators",id:"math-operators",level:3},{value:"Boolean Keywords",id:"boolean-keywords",level:3},{value:"Second Quiz",id:"second-quiz",level:2},{value:"Functions",id:"functions",level:3},{value:"Main Block",id:"main-block",level:3},{value:"Shell Commands",id:"shell-commands",level:3},{value:"Lists",id:"lists",level:3},{value:"Tuples",id:"tuples",level:3},{value:"Sets",id:"sets",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Slicing",id:"slicing",level:3},{value:"Strings",id:"strings",level:3}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ops445-reference-sheet-for-assessments"},"OPS445 Reference Sheet For Assessments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Note"),": words in (these) indicate a thing you will have to write, the parentheses are ",(0,r.kt)("strong",{parentName:"li"},"not")," part of the syntax."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Note"),": variable placeholders will use ",(0,r.kt)("strong",{parentName:"li"},"x"),", ",(0,r.kt)("strong",{parentName:"li"},"y"),", and so on.")),(0,r.kt)("h2",{id:"first-quiz"},"First Quiz"),(0,r.kt)("h3",{id:"shebang"},"Shebang"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"#!/usr/bin/env python3\n")),(0,r.kt)("h3",{id:"built-in-functions"},"Built-in Functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"help()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"print()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"int()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"str()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"float()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"len()"))),(0,r.kt)("h3",{id:"conditions"},"Conditions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"if (condition):\n    (action1)\nelif (condition2):\n    (action2)\nelse:\n    (action)\n")),(0,r.kt)("h3",{id:"loops"},"Loops"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"while (condition1):\n    (action)\n    if (condition2):\n        break\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"for x in y:\n    (action)\n")),(0,r.kt)("h3",{id:"command-line-arguments"},"Command Line Arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import sys\n\nsys.argv\n")),(0,r.kt)("h3",{id:"import-keywords"},"Import Keywords"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"from (module) import (something)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"import (module) as (alias)"))),(0,r.kt)("h3",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Col 1"),(0,r.kt)("th",{parentName:"tr",align:null},"Col 2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<"),(0,r.kt)("td",{parentName:"tr",align:null},">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<","="),(0,r.kt)("td",{parentName:"tr",align:null},">","=")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"=="),(0,r.kt)("td",{parentName:"tr",align:null},"!=")))),(0,r.kt)("h3",{id:"logical-operators"},"Logical Operators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"and")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"or")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"not"))),(0,r.kt)("h3",{id:"math-operators"},"Math Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Col 1"),(0,r.kt)("th",{parentName:"tr",align:null},"Col 2"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"+"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null},"**")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"/"),(0,r.kt)("td",{parentName:"tr",align:null},"//")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"+="),(0,r.kt)("td",{parentName:"tr",align:null},"-=")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*="),(0,r.kt)("td",{parentName:"tr",align:null},"/=")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"boolean-keywords"},"Boolean Keywords"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"True")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"False")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"None"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"second-quiz"},"Second Quiz"),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def func_name(x='Default value'):\n    return y\n")),(0,r.kt)("h3",{id:"main-block"},"Main Block"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'if __name__ == "__main__":\n')),(0,r.kt)("h3",{id:"shell-commands"},"Shell Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"os.system('x')\nos.popen('x').read()\np = subprocess.Popen(['x'], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\ns = p.communicate()\ns[0].decode('utf-8')\n")),(0,r.kt)("h3",{id:"lists"},"Lists"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = []\nx.append(x)\nx.insert(x, y)\nx.remove(x)\nx.sort()\nx.pop()\n\ny in x\n")),(0,r.kt)("h3",{id:"tuples"},"Tuples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = (y, )\nx = (y, z)\n")),(0,r.kt)("h3",{id:"sets"},"Sets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = {x, y}\nx.add(x)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = {}\ny = {}\nx & y\nx - y\nx ^ y\nx | y\n")),(0,r.kt)("h3",{id:"dictionaries"},"Dictionaries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = {y: z, a: b}\nx[y] = z\n\nx.keys()\nx.values()\nx.items()\n")),(0,r.kt)("h3",{id:"slicing"},"Slicing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x = 'PYTHON'\nx[:z]\nx[y:]\nx[y:z]\n")),(0,r.kt)("h3",{id:"strings"},"Strings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upper()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lower()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"strip()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"split()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"join()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"center()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replace()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"startswith()"))))}m.isMDXComponent=!0}}]);